const h=document.querySelector(".header__input"),T=document.querySelector(".counter"),k=document.querySelector(".character__counter"),b=document.querySelector(".tasks"),$=document.querySelector(".stats__count"),q=()=>{T.textContent=h.value.length},I=()=>{h.value.length===100?k.classList.add("error"):k.classList.remove("error")},x=()=>{q(),I()},u=()=>{$.textContent=b.childElementCount},B=t=>{t.classList.add("invalid-input"),t.style.width="7.75rem"},D=t=>{t.classList.remove("invalid-input"),t.style.width=""};h.addEventListener("input",x);const l="http://localhost:3000/tasks";async function v(){try{const t=await fetch(`${l}`);if(!t.ok)throw new Error("Failed to fetch tasks");return await t.json()}catch(t){return console.error("Error:",t),[]}}async function F(t){try{console.log(`fetching ${t} todos...`);let e=`${l}/filtered`;t==="completed"?e+="?completed=true":t==="active"&&(e+="?completed=false");const o=await fetch(e);if(!o.ok)throw new Error("Failed to fetch tasks");const n=await o.json();return console.log(`Fetched ${t} todos:`),n.forEach(i=>{console.log(i)}),n}catch(e){return console.error("Error:",e),[]}}async function A(t){try{const e=await fetch(l,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error("Failed to create a task");return await e.json()}catch(e){throw console.error("Error creating task:",e),e}}async function j(t){try{if(!(await fetch(`${l}/${t}`,{method:"DELETE"})).ok)throw new Error("Failed to delete a task")}catch(e){throw console.error("Error deleting todo:",e),e}}async function w(t,e){try{console.log(`Updating task ${t} with data:`,e);const o=await fetch(`${l}/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok)throw new Error("Failed to update task");return await o.json()}catch(o){throw console.error("Error updating task:",o),o}}function g(t){const e=document.querySelector(".tasks");e.innerHTML="",t.forEach(o=>{const n=P(o);e.appendChild(n)})}function P(t){const e=document.createElement("li");e.className="tasks__item",e.draggable=!0,e.id=t._id,t.completed&&e.classList.add("completed"),e.innerHTML=`
      <div class="tasks__content">
         <input class="tasks__checkbox" type="checkbox" name="task-name" id="${t._id}" ${t.completed?"checked":""}>
         <span class="tasks__text" contenteditable>${t.task}</span>
      </div>
      <div>
         <button class="tasks__remove-btn" title="Remove task ${t.task}">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" class="delete-icon">
               <path d="M16.97 0l.708.707L9.546 8.84l8.132 8.132-.707.707-8.132-8.132-8.132 8.132L0 16.97l8.132-8.132L0 .707.707 0 8.84 8.132 16.971 0z"/>
            </svg>
         </button>
      </div>
   `;const o=e.querySelector(".tasks__checkbox");return o.addEventListener("change",async()=>{console.log(`Checkbox for task ${t._id} changed to ${o.checked}`);try{await w(t._id,{completed:o.checked}),t.completed=o.checked,e.classList.toggle("completed",t.completed)}catch(n){console.error("Error updating task completion:",n)}}),e}const E=()=>{const t=document.querySelector(".tasks");[...t.querySelectorAll(".tasks__item")].forEach(s=>{s.addEventListener("dragstart",o),s.addEventListener("dragend",n)}),t.addEventListener("dragover",i),t.addEventListener("dragenter",S);function o(){this.classList.add("dragging")}function n(){this.classList.remove("dragging")}function i(s){s.preventDefault();const c=t.querySelector(".tasks__item.dragging"),p=[...t.querySelectorAll(".tasks__item:not(.dragging)")],r=L(s.clientY,p);if(r){const C=`${r.offsetTop-c.offsetTop}px`;c.style.setProperty("--translateY",C),t.insertBefore(c,r.element)}else t.appendChild(c)}function L(s,c){return c.map(r=>({element:r,middle:r.getBoundingClientRect().top+r.getBoundingClientRect().height/2})).find(r=>s<=r.middle)}function S(s){s.preventDefault()}},M=document.getElementById("all"),N=document.getElementById("active"),O=document.getElementById("completed"),R=document.querySelector(".stats__clear");let m="all";const a=async t=>{try{m=t;const e=await F(t);console.log(`Filtered todos (${t}):`),console.log(e),g(e),u(),E()}catch(e){console.error("Error filtering todos:",e)}};M.addEventListener("click",async()=>{await a("all")});N.addEventListener("click",async()=>{await a("active")});O.addEventListener("click",async()=>{await a("completed")});R.addEventListener("click",async()=>{document.querySelectorAll(".tasks__item.completed").forEach(e=>e.remove()),u(),await a("active")});const y=document.querySelector(".header__input"),_=document.querySelector(".tasks"),U=async()=>{console.log("Updating todos...");const t=await v();g(t),u()},Y=async t=>{const e=t.target.value.trim();if(!e)return;const o={task:e};console.log("Sending todo:",o);try{await A(o),console.log("Task created successfully"),await a(m)}catch(n){console.error("Error:",n.message)}};_.addEventListener("click",async t=>{if(t.target.classList.contains("delete-icon")){const e=t.target.closest(".tasks__item").id;try{await j(e),console.log("Task deleted successfully"),await a(m)}catch(o){console.error("Error:",o.message)}}});async function H(t){const e=t.closest(".tasks__item").id;let o=t.textContent.trim();if(o.length>100&&(o=o.slice(0,100),t.textContent=o),o.length===0){B(t),console.warn("Task description cannot be empty");return}else D(t);try{await w(e,{task:o}),console.log("Task updated successfully")}catch(i){console.error("Error updating task:",i.message)}}y.addEventListener("keyup",t=>{(t.code==="Enter"||t.code==="NumpadEnter")&&(Y(t),y.value="")});_.addEventListener("input",async t=>{t.target.classList.contains("tasks__text")&&H(t.target)});const d=document.body,f=document.querySelector(".themeIcon"),J=()=>{d.classList.add("theme-light"),d.classList.contains("theme-dark")?f.src="/assets/images/icon-moon.svg":f.src="/assets/images/icon-sun.svg"},z=()=>{d.classList.toggle("theme-dark"),d.classList.toggle("theme-light")},G=document.querySelector(".header__btn-theme");G.addEventListener("click",z);document.addEventListener("DOMContentLoaded",async()=>{try{J(),await U();const t=await v();g(t),u(),E()}catch(t){console.error(`Error fetching todos: ${t.message}`)}});
