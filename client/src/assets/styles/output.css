@charset "UTF-8";
/*****************************************************************************
 * reset
 *
 *  Based on Josh CSS reset.  This initializes elements to a
 *  predictable and repeatable state to make reuse across project simpler.
 *
 *****************************************************************************/
/**
 * use border-box for all elements
 */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/**
 * set default margin on everything to 0
 */
* {
  margin: 0;
}

/**
 * full height body by default
 */
html,
body {
  height: 100%;
}

/**
 * readable font defaults including proper high-dpi font anti-aliasing
 */
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

/**
 * eliminate single line artifact on img and limit scale so initial display
 * is not unusually huge for high-dpi images.
 */
img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
}

/**
 * inherit rather than use implicit fonts on form elements
 */
input,
button,
textarea,
select {
  font: inherit;
}

/**
 * headings and paragraph should inherit body font and have
 * no implicit margins.
 */
p,
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
  font: inherit;
  overflow-wrap: break-word;
}

/**
 * limit z-index to within the application layers and do not bleed into
 * browser supplied layers.
 */
#root,
#__next {
  isolation: isolate;
}

/**
 * eliminate styling on links so they look like normal text by default
 */
a {
  color: currentcolor;
  text-decoration: none;
}

ul {
  padding: 0;
}

li {
  list-style-type: none;
}

.controls__btn, .tasks__remove-btn, .header__btn-theme {
  background: transparent;
  border: none;
}

.controls__btn, .stats, footer {
  padding: 0.5rem 0;
  color: var(--drag-text-color);
  font-size: clamp(0.85rem, 3vw, 1rem);
  font-weight: 700;
}

input[type=checkbox]::before, input[type=checkbox], .controls__filters, footer {
  display: flex;
  justify-content: center;
  align-items: center;
}

.header .error {
  color: var(--clr-error) !important;
  opacity: 0.9;
}

.invalid-input::before {
  content: "Can't be empty.";
  font-weight: 400;
  font-style: italic;
  width: 10rem;
  color: var(--clr-error);
  position: absolute;
  left: 3.4rem;
  text-decoration: solid underline 1px;
  text-underline-offset: 4px;
}

body.theme-light {
  --body-bg: hsl(236, 33%, 92%);
  --header-bg: url("/assets/images/bg-mobile-light.jpg");
  --header-bg-desktop: url("/assets/images/bg-mobile-light.jpg");
  --heading-color: hsl(0, 0%, 98%);
  --input-bg: hsl(0, 0%, 98%);
  --input-color: hsl(234, 39%, 85%);
  --task-color: hsl(235, 19%, 35%);
  --complete-task-color: hsl(236, 9%, 61%);
  --border-bottom-color: hsl(233, 11%, 84%);
  --btn-border: hsl(233, 11%, 84%);
  --remove-task-hover: hsl(235, 19%, 35%);
  --filter-task-hover: hsl(235, 19%, 35%);
  --drag-text-color: hsl(236, 9%, 61%);
  --clr-error: hsl(348, 91%, 49%);
  --clr-editing: hsl(0, 4%, 91%);
}

body.theme-dark {
  --body-bg: hsl(235, 21%, 11%);
  --header-bg: url("/assets/images/bg-mobile-dark.jpg");
  --header-bg-desktop: url("/assets/images/bg-desktop-dark.jpg");
  --heading-color: hsl(236, 33%, 92%);
  --input-bg: hsl(235, 24%, 19%);
  --input-color: hsl(234, 39%, 85%);
  --task-color: hsl(234, 39%, 85%);
  --complete-task-color: hsl(234, 11%, 52%);
  --border-bottom-color: hsl(237, 14%, 26%);
  --btn-border: hsl(234, 11%, 52%);
  --remove-task-hover: hsl(236, 33%, 92%);
  --filter-task-hover: hsl(234, 39%, 85%);
  --drag-text-color: hsl(238, 10%, 50%);
  --clr-error: hsl(0, 98%, 50%);
  --clr-editing: hsl(237, 13%, 33%);
}

body {
  font-family: "Josefin Sans", sans-serif;
  font-size: 18px;
  background-color: var(--body-bg);
}

.wrapper {
  max-width: 30rem;
  padding: 3rem 1.5rem;
  margin: 0 auto;
}

.header {
  background-image: var(--header-bg);
  background-repeat: no-repeat;
  background-size: cover;
}

.header__top {
  display: flex;
  justify-content: space-between;
  margin-bottom: 2rem;
}

.header__title {
  color: var(--heading-color);
  font-size: clamp(1.5rem, 3vw, 2rem);
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 8px;
}

.header__input__wrapper {
  position: relative;
}

.header__btn-theme {
  cursor: pointer;
}

.header__input {
  color: var(--task-color);
  background-color: var(--input-bg);
  width: 100%;
  border: none;
  border-radius: 10px;
  padding: 1rem;
}

.header__input:focus {
  outline: 1px solid var(--task-color);
}

.character__counter {
  font-size: 0.9rem;
  color: var(--task-color);
  opacity: 0.5;
  position: absolute;
  right: 5px;
  top: 62.5%;
}

.wrapper:has(.tasks) {
  position: relative;
  bottom: 4.5rem;
}

.tasks__item {
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: var(--input-bg);
  width: 100%;
  border: none;
  border-radius: 0px;
  padding: 1rem;
  border-bottom: 1px solid var(--body-bg);
  transition: transform 0.3s ease-in-out;
}

.tasks__item.dragging {
  opacity: 0.5; /* Reduce opacity while dragging */
}

.tasks__item:first-of-type {
  border-radius: 10px 10px 0 0;
}

.tasks__content {
  display: grid;
  grid-template-columns: 2rem 1fr;
  align-items: center;
  max-width: 100%;
}

.tasks__text {
  padding: 0.2rem 0.5rem 0 0.5rem;
  font-size: clamp(0.85rem, 3vw, 1rem);
  font-weight: 700;
  color: var(--task-color);
  cursor: pointer;
  /* Handle long words without spaces */
  overflow-wrap: break-word;
  word-break: break-word;
  hyphens: auto;
  transition: color 0.2s ease-in-out;
}
.tasks__text:is(:hover, :focus, :focus-visible) {
  background-color: var(--clr-editing);
  opacity: 0.9;
  border-radius: 5px;
  outline: none;
}

.tasks__remove-btn {
  width: 1.75rem;
  cursor: pointer;
}
.tasks__remove-btn svg {
  padding-top: 0.5rem;
  fill: var(--remove-task-hover);
  transition: transform 0.2s ease;
}
.tasks__remove-btn svg:is(:hover, :focus) {
  transform: scale(1.25);
}

.stats {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  box-shadow: 0px 9px 3px -4px rgba(0, 0, 0, 0.16);
  background-color: var(--input-bg);
  width: 100%;
  border: none;
  border-radius: 0px 0px 10px 10px;
  padding: 1rem;
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
}

.controls {
  margin-top: 2rem;
  box-shadow: 0px 9px 3px -4px rgba(0, 0, 0, 0.16);
  background-color: var(--input-bg);
  width: 100%;
  border: none;
  border-radius: 10px;
  padding: 1rem;
}

.controls__filters {
  gap: 1rem;
  flex-wrap: wrap;
}

.controls__btn {
  cursor: pointer;
}
.controls__btn:is(:hover, :focus) {
  color: var(--filter-task-hover);
}

.stats__clear:is(:hover, :focus) {
  color: var(--filter-task-hover);
  cursor: pointer;
}

input[type=checkbox] {
  position: relative;
  width: 1.5rem;
  height: 1.5rem;
  appearance: none;
  -webkit-appearance: none;
  outline: none;
  border: 1px solid var(--btn-border);
  border-radius: 100%;
  cursor: pointer;
}

input[type=checkbox]::before {
  content: "âœ“";
  color: #fff;
  font-size: 0.75rem;
  width: 50%;
  height: 50%;
  transform: scale(0);
  position: absolute;
  z-index: 2;
  right: 0px;
  bottom: 0px;
}

input[type=checkbox]::after {
  content: "";
  width: calc(100% - 2px); /* Adjusted to fit within the border */
  height: calc(100% - 2px);
  background-color: var(--input-bg);
  position: absolute;
  top: 1px;
  left: 1px;
  border-radius: 100%;
  z-index: 1;
}

input[type=checkbox]:hover::after {
  background-color: transparent;
}

input[type=checkbox]:checked::before {
  transform: translate(-50%, -50%) scale(1);
}

input[type=checkbox]:checked {
  background: linear-gradient(hsl(192, 100%, 67%), hsl(280, 87%, 65%)) border-box;
  border-color: transparent;
}

input[type=checkbox]:checked::after {
  background-color: transparent;
}

input[type=checkbox]:not(:checked):hover {
  border-color: transparent;
  background: linear-gradient(hsl(192, 100%, 67%), hsl(280, 87%, 65%)) border-box;
}

input[type=checkbox]:not(:checked):hover::after {
  content: "";
  width: calc(100% - 2px); /* Adjusted to fit within the border */
  height: calc(100% - 2px);
  background-color: var(--input-bg);
  position: absolute;
  top: 1px;
  left: 1px;
  border-radius: inherit;
  z-index: 1;
}

input[type=checkbox]:checked + .tasks__text {
  color: var(--complete-task-color);
  text-decoration: line-through;
  opacity: 0.8;
}

/*# sourceMappingURL=output.css.map */
